// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5wfiQsykEjzgVqMWi3s1vV
// Component: M5wgRRxb8Cye

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantso1EZtZviId2I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o1EZtZVIId2i/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5wfiQsykEjzgVqMWi3s1vV/projectcss
import sty from "./PlasmicNavigation.module.css"; // plasmic-import: M5wgRRxb8Cye/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: _3Lij41kf8lg/icon

createPlasmicElementProxy;

export type PlasmicNavigation__VariantMembers = {
  menuToggle: "menuToggle";
};
export type PlasmicNavigation__VariantsArgs = {
  menuToggle?: SingleBooleanChoiceArg<"menuToggle">;
};
type VariantPropType = keyof PlasmicNavigation__VariantsArgs;
export const PlasmicNavigation__VariantProps = new Array<VariantPropType>(
  "menuToggle"
);

export type PlasmicNavigation__ArgsType = {};
type ArgPropType = keyof PlasmicNavigation__ArgsType;
export const PlasmicNavigation__ArgProps = new Array<ArgPropType>();

export type PlasmicNavigation__OverridesType = {
  root?: Flex__<"nav">;
  img?: Flex__<typeof PlasmicImg__>;
  bowlingLink?: Flex__<"a"> & Partial<LinkProps>;
  bowlingLink2?: Flex__<"a"> & Partial<LinkProps>;
  bowlingLink3?: Flex__<"a"> & Partial<LinkProps>;
  bowlingLink6?: Flex__<"a"> & Partial<LinkProps>;
  svg?: Flex__<"svg">;
  mobileMenu?: Flex__<"section">;
};

export interface DefaultNavigationProps {
  menuToggle?: SingleBooleanChoiceArg<"menuToggle">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavigation__RenderFunc(props: {
  variants: PlasmicNavigation__VariantsArgs;
  args: PlasmicNavigation__ArgsType;
  overrides: PlasmicNavigation__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "menuToggle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.menuToggle
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso1EZtZviId2I()
  });

  return (
    <nav
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootmenuToggle]: hasVariant($state, "menuToggle", "menuToggle") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___1EtJx, {
          [sty.freeBoxmenuToggle___1EtJxXfpwu]: hasVariant(
            $state,
            "menuToggle",
            "menuToggle"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox___5Sq6F)}>
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"59px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={
              "https://images.ctfassets.net/bt2x230ynumr/Him7OQayL1RJKy6DkHai0/63ff058b2ef0879f9f39941fb13f3137/image.png"
            }
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ooV2G, {
              [sty.freeBoxmenuToggle__ooV2GXfpwu]: hasVariant(
                $state,
                "menuToggle",
                "menuToggle"
              )
            })}
          >
            <PlasmicLink__
              data-plasmic-name={"bowlingLink"}
              data-plasmic-override={overrides.bowlingLink}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.bowlingLink
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"BOWLING"}
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"bowlingLink2"}
              data-plasmic-override={overrides.bowlingLink2}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.bowlingLink2
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"ARCADE"}
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"bowlingLink3"}
              data-plasmic-override={overrides.bowlingLink3}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.bowlingLink3
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"MENU"}
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"bowlingLink6"}
              data-plasmic-override={overrides.bowlingLink6}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.bowlingLink6
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"LOGIN/SIGN UP"}
            </PlasmicLink__>
            <Icon2Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgmenuToggle]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              })}
              onClick={async event => {
                const $steps = {};

                $steps["updateMenuToggle"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: "menuToggle",
                        operation: 2,
                        value: "menuToggle"
                      };
                      return (({ vgroup, value }) => {
                        if (typeof value === "string") {
                          value = [value];
                        }

                        const oldValue = $stateGet($state, vgroup);
                        $stateSet($state, vgroup, !oldValue);
                        return !oldValue;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateMenuToggle"] != null &&
                  typeof $steps["updateMenuToggle"] === "object" &&
                  typeof $steps["updateMenuToggle"].then === "function"
                ) {
                  $steps["updateMenuToggle"] = await $steps["updateMenuToggle"];
                }
              }}
              role={"img"}
            />
          </Stack__>
        </div>
      </div>
      <section
        data-plasmic-name={"mobileMenu"}
        data-plasmic-override={overrides.mobileMenu}
        className={classNames(projectcss.all, sty.mobileMenu, {
          [sty.mobileMenumenuToggle]: hasVariant(
            $state,
            "menuToggle",
            "menuToggle"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__xAoQj, {
            [sty.freeBoxmenuToggle__xAoQjXfpwu]: hasVariant(
              $state,
              "menuToggle",
              "menuToggle"
            )
          })}
        >
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__sruk9,
              {
                [sty.linkmenuToggle__sruk9Xfpwu]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              }
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["goToBowling"] = true
                ? (() => {
                    const actionArgs = { destination: `/bowling` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToBowling"] != null &&
                typeof $steps["goToBowling"] === "object" &&
                typeof $steps["goToBowling"].then === "function"
              ) {
                $steps["goToBowling"] = await $steps["goToBowling"];
              }
            }}
            platform={"nextjs"}
          >
            {"BOWLING"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___66LoP,
              {
                [sty.linkmenuToggle___66LoPxfpwu]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              }
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["goToArcade"] = true
                ? (() => {
                    const actionArgs = { destination: `/arcade` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToArcade"] != null &&
                typeof $steps["goToArcade"] === "object" &&
                typeof $steps["goToArcade"].then === "function"
              ) {
                $steps["goToArcade"] = await $steps["goToArcade"];
              }
            }}
            platform={"nextjs"}
          >
            {"ARCADE"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__cNesO,
              {
                [sty.linkmenuToggle__cNesOxfpwu]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              }
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"FOOD AND DRINK"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__uJc0P,
              {
                [sty.linkmenuToggle__uJc0Pxfpwu]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              }
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["goToPartiesAndEvents"] = true
                ? (() => {
                    const actionArgs = { destination: `/parties` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToPartiesAndEvents"] != null &&
                typeof $steps["goToPartiesAndEvents"] === "object" &&
                typeof $steps["goToPartiesAndEvents"].then === "function"
              ) {
                $steps["goToPartiesAndEvents"] = await $steps[
                  "goToPartiesAndEvents"
                ];
              }
            }}
            platform={"nextjs"}
          >
            {"PARTIES AND EVENTS"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__m96Wu,
              {
                [sty.linkmenuToggle__m96WuXfpwu]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              }
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["goToCompanyEvents"] = true
                ? (() => {
                    const actionArgs = { destination: `/company-events` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToCompanyEvents"] != null &&
                typeof $steps["goToCompanyEvents"] === "object" &&
                typeof $steps["goToCompanyEvents"].then === "function"
              ) {
                $steps["goToCompanyEvents"] = await $steps["goToCompanyEvents"];
              }
            }}
            platform={"nextjs"}
          >
            {"COMPANY EVENTS"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__s47,
              {
                [sty.linkmenuToggle__s47Xfpwu]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              }
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["goToEducation"] = true
                ? (() => {
                    const actionArgs = { destination: `/education` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToEducation"] != null &&
                typeof $steps["goToEducation"] === "object" &&
                typeof $steps["goToEducation"].then === "function"
              ) {
                $steps["goToEducation"] = await $steps["goToEducation"];
              }
            }}
            platform={"nextjs"}
          >
            {"EDUCATION"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__t3TcW,
              {
                [sty.linkmenuToggle__t3TcWxfpwu]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              }
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["goToLeagues"] = true
                ? (() => {
                    const actionArgs = { destination: `/leagues` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToLeagues"] != null &&
                typeof $steps["goToLeagues"] === "object" &&
                typeof $steps["goToLeagues"].then === "function"
              ) {
                $steps["goToLeagues"] = await $steps["goToLeagues"];
              }
            }}
            platform={"nextjs"}
          >
            {"LEAGUE PLAY"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___5VrVw,
              {
                [sty.linkmenuToggle___5VrVwxfpwu]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              }
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["goToHttpsbackalleybowlingcomsheets"] = true
                ? (() => {
                    const actionArgs = {
                      destination: "https://backalleybowling.com/sheets"
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHttpsbackalleybowlingcomsheets"] != null &&
                typeof $steps["goToHttpsbackalleybowlingcomsheets"] ===
                  "object" &&
                typeof $steps["goToHttpsbackalleybowlingcomsheets"].then ===
                  "function"
              ) {
                $steps["goToHttpsbackalleybowlingcomsheets"] = await $steps[
                  "goToHttpsbackalleybowlingcomsheets"
                ];
              }
            }}
            platform={"nextjs"}
          >
            {"LEAGUE SHEETS"}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__xqyJi,
              {
                [sty.linkmenuToggle__xqyJiXfpwu]: hasVariant(
                  $state,
                  "menuToggle",
                  "menuToggle"
                )
              }
            )}
            component={Link}
            onClick={async event => {
              const $steps = {};

              $steps["goToHttpsbackalleybowlingcombucks"] = true
                ? (() => {
                    const actionArgs = {
                      destination: "https://backalleybowling.com/bucks"
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHttpsbackalleybowlingcombucks"] != null &&
                typeof $steps["goToHttpsbackalleybowlingcombucks"] ===
                  "object" &&
                typeof $steps["goToHttpsbackalleybowlingcombucks"].then ===
                  "function"
              ) {
                $steps["goToHttpsbackalleybowlingcombucks"] = await $steps[
                  "goToHttpsbackalleybowlingcombucks"
                ];
              }
            }}
            platform={"nextjs"}
          >
            {"LOG IN / SIGN UP"}
          </PlasmicLink__>
        </div>
      </section>
    </nav>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "bowlingLink",
    "bowlingLink2",
    "bowlingLink3",
    "bowlingLink6",
    "svg",
    "mobileMenu"
  ],
  img: ["img"],
  bowlingLink: ["bowlingLink"],
  bowlingLink2: ["bowlingLink2"],
  bowlingLink3: ["bowlingLink3"],
  bowlingLink6: ["bowlingLink6"],
  svg: ["svg"],
  mobileMenu: ["mobileMenu"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "nav";
  img: typeof PlasmicImg__;
  bowlingLink: "a";
  bowlingLink2: "a";
  bowlingLink3: "a";
  bowlingLink6: "a";
  svg: "svg";
  mobileMenu: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigation__VariantsArgs;
    args?: PlasmicNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavigation__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavigation__ArgProps,
          internalVariantPropNames: PlasmicNavigation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavigation";
  } else {
    func.displayName = `PlasmicNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigation = Object.assign(
  // Top-level PlasmicNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    bowlingLink: makeNodeComponent("bowlingLink"),
    bowlingLink2: makeNodeComponent("bowlingLink2"),
    bowlingLink3: makeNodeComponent("bowlingLink3"),
    bowlingLink6: makeNodeComponent("bowlingLink6"),
    svg: makeNodeComponent("svg"),
    mobileMenu: makeNodeComponent("mobileMenu"),

    // Metadata about props expected for PlasmicNavigation
    internalVariantProps: PlasmicNavigation__VariantProps,
    internalArgProps: PlasmicNavigation__ArgProps
  }
);

export default PlasmicNavigation;
/* prettier-ignore-end */
