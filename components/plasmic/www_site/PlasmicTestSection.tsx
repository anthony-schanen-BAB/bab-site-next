// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5wfiQsykEjzgVqMWi3s1vV
// Component: 4ejJZ_ZIRBhL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5wfiQsykEjzgVqMWi3s1vV/projectcss
import sty from "./PlasmicTestSection.module.css"; // plasmic-import: 4ejJZ_ZIRBhL/css

createPlasmicElementProxy;

export type PlasmicTestSection__VariantMembers = {};
export type PlasmicTestSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestSection__VariantsArgs;
export const PlasmicTestSection__VariantProps = new Array<VariantPropType>();

export type PlasmicTestSection__ArgsType = {
  pageZoneId?: string;
};
type ArgPropType = keyof PlasmicTestSection__ArgsType;
export const PlasmicTestSection__ArgProps = new Array<ArgPropType>(
  "pageZoneId"
);

export type PlasmicTestSection__OverridesType = {
  root?: Flex__<"div">;
  accordion?: Flex__<typeof AntdAccordion>;
  navigationBar?: Flex__<typeof NavigationBar>;
  columns?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  textArea?: Flex__<typeof AntdTextArea>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultTestSectionProps {
  pageZoneId?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTestSection__RenderFunc(props: {
  variants: PlasmicTestSection__VariantsArgs;
  args: PlasmicTestSection__ArgsType;
  overrides: PlasmicTestSection__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        const child$Props = {
          activeKey: generateStateValueProp($state, [
            "accordion",
            "activePanelId"
          ]),
          bordered: true,
          className: classNames("__wab_instance", sty.accordion),
          items: (
            <React.Fragment>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem__c9ZoZ
                )}
                id={1}
                label2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hdeLq
                    )}
                  >
                    {"First Item"}
                  </div>
                }
                showArrow={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lNhu
                  )}
                >
                  {"First Children"}
                </div>
              </AntdAccordionItem>
              <AntdAccordionItem
                className={classNames(
                  "__wab_instance",
                  sty.accordionItem___4VcQj
                )}
                id={2}
                label2={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iG58R
                    )}
                  >
                    {"Second Item"}
                  </div>
                }
                showArrow={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ugj41
                  )}
                >
                  {"Second Children"}
                </div>
              </AntdAccordionItem>
            </React.Fragment>
          ),
          onChange: generateStateOnChangePropForCodeComponents(
            $state,
            "activePanelId",
            ["accordion", "activePanelId"],
            AntdAccordion_Helpers
          )
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "activePanelId",
              plasmicStateName: "accordion.activePanelId"
            }
          ],
          [],
          AntdAccordion_Helpers ?? {},
          child$Props
        );

        return (
          <AntdAccordion
            data-plasmic-name={"accordion"}
            data-plasmic-override={overrides.accordion}
            {...child$Props}
          />
        );
      })()}
      <NavigationBar
        data-plasmic-name={"navigationBar"}
        data-plasmic-override={overrides.navigationBar}
        brand={
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__c3KIv
            )}
            component={Link}
            href={"#"}
            platform={"nextjs"}
          >
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__caE20)}
              displayHeight={"40px"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              src={"https://static1.plasmic.app/nav-logo-placeholder.svg"}
            />
          </PlasmicLink__>
        }
        className={classNames("__wab_instance", sty.navigationBar)}
        closeButton={
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__vynmK)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={"https://static1.plasmic.app/close.svg"}
          />
        }
        itemsGap={8}
        menuItems={
          <React.Fragment>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__qonGu
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"Home"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__quSn8
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"About"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__y5Tgl
              )}
              component={Link}
              href={"/"}
              platform={"nextjs"}
            >
              {"Contact"}
            </PlasmicLink__>
          </React.Fragment>
        }
        openButton={
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__jtR1O)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            src={"https://static1.plasmic.app/menu.svg"}
          />
        }
        responsiveBreakpoint={768}
      />

      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column___4SEux)} />

        <div className={classNames(projectcss.all, sty.column__aPgjL)} />
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__fD7E4
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $state.form.value.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.form),
          extendedOnValuesChange: generateStateOnChangePropForCodeComponents(
            $state,
            "value",
            ["form", "value"],
            FormWrapper_Helpers
          ),
          formItems: undefined,
          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: undefined,
          onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
            $state,
            "isSubmitting",
            ["form", "isSubmitting"],
            FormWrapper_Helpers
          ),
          ref: ref => {
            $refs["form"] = ref;
          },
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "form.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "form.isSubmitting"
            }
          ],
          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );

        return (
          <FormWrapper
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            {...child$Props}
          >
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__nquHy)}
              initialValue={"test"}
              label={"Name"}
              name={"name"}
            >
              <AntdInput className={classNames("__wab_instance", sty.input)} />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__orkk5)}
              label={"Message"}
              name={"message"}
            >
              <AntdTextArea
                className={classNames("__wab_instance", sty.textArea)}
              />
            </FormItemWrapper>
            <AntdButton
              className={classNames("__wab_instance", sty.button)}
              submitsForm={true}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ammnv
                )}
              >
                {"Submit"}
              </div>
            </AntdButton>
          </FormWrapper>
        );
      })()}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "accordion",
    "navigationBar",
    "columns",
    "form",
    "input",
    "textArea",
    "button"
  ],
  accordion: ["accordion"],
  navigationBar: ["navigationBar"],
  columns: ["columns"],
  form: ["form", "input", "textArea", "button"],
  input: ["input"],
  textArea: ["textArea"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  accordion: typeof AntdAccordion;
  navigationBar: typeof NavigationBar;
  columns: "div";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  textArea: typeof AntdTextArea;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestSection__VariantsArgs;
    args?: PlasmicTestSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTestSection__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTestSection__ArgProps,
          internalVariantPropNames: PlasmicTestSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTestSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestSection";
  } else {
    func.displayName = `PlasmicTestSection.${nodeName}`;
  }
  return func;
}

export const PlasmicTestSection = Object.assign(
  // Top-level PlasmicTestSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    accordion: makeNodeComponent("accordion"),
    navigationBar: makeNodeComponent("navigationBar"),
    columns: makeNodeComponent("columns"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    textArea: makeNodeComponent("textArea"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicTestSection
    internalVariantProps: PlasmicTestSection__VariantProps,
    internalArgProps: PlasmicTestSection__ArgProps
  }
);

export default PlasmicTestSection;
/* prettier-ignore-end */
