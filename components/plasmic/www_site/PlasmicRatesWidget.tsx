// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5wfiQsykEjzgVqMWi3s1vV
// Component: e6aLe1etcU9D

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantso1EZtZviId2I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o1EZtZVIId2i/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5wfiQsykEjzgVqMWi3s1vV/projectcss
import sty from "./PlasmicRatesWidget.module.css"; // plasmic-import: e6aLe1etcU9D/css

createPlasmicElementProxy;

export type PlasmicRatesWidget__VariantMembers = {};
export type PlasmicRatesWidget__VariantsArgs = {};
type VariantPropType = keyof PlasmicRatesWidget__VariantsArgs;
export const PlasmicRatesWidget__VariantProps = new Array<VariantPropType>();

export type PlasmicRatesWidget__ArgsType = {
  center?: string;
};
type ArgPropType = keyof PlasmicRatesWidget__ArgsType;
export const PlasmicRatesWidget__ArgProps = new Array<ArgPropType>("center");

export type PlasmicRatesWidget__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultRatesWidgetProps {
  center?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRatesWidget__RenderFunc(props: {
  variants: PlasmicRatesWidget__VariantsArgs;
  args: PlasmicRatesWidget__ArgsType;
  overrides: PlasmicRatesWidget__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query2: usePlasmicDataOp(() => {
      return {
        sourceId: "6C5GutKknwRfikZFCLEAXU",
        opId: "b689281e-2374-4ffe-bc0c-e717fb982ba7",
        userArgs: {},
        cacheKey: `plasmic.$.b689281e-2374-4ffe-bc0c-e717fb982ba7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getBowlingRates: usePlasmicDataOp(() => {
      return {
        sourceId: "AZSEh7u3YtigAZKbPvRRs",
        opId: "f7151d61-ee82-4f5e-8efd-cbccf51423e4",
        userArgs: {},
        cacheKey: `plasmic.$.f7151d61-ee82-4f5e-8efd-cbccf51423e4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso1EZtZviId2I()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__x9Vy2)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__mUf4C)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"70px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/www_site/images/whiteLogopng.png",
              fullWidth: 450,
              fullHeight: 495,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jfKkc
            )}
          >
            {"BOWLING RATES"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__hLg74)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sr5B
            )}
          >
            {"DAY OF WEEK"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__k92Ru
            )}
          >
            {"WALK-IN HOURLY RATE (PER LANE)"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__exD
            )}
          >
            {"WALK-IN GAME RATE (PER PERSON)"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___79PlR
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "HOURLY RESERVATION (PER LANE)"
              : "HOURLY RESERVATION (PER LANE)"}
          </div>
        </Stack__>
        {(() => {
          try {
            return !$props.center;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eXrM6
            )}
          >
            {"Please select a location to view bowling rates"}
          </div>
        ) : null}
        {(() => {
          try {
            return !!$props.center;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? (_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return (() => {
                    let data = $queries.getBowlingRates.data.response.documents;
                    data = data.filter(
                      item =>
                        item.fields["center-text"].stringValue === $props.center
                    );
                    data.sort((a, b) => {
                      let dateComparison =
                        parseInt(a.fields.date.integerValue) -
                        parseInt(b.fields.date.integerValue);
                      if (dateComparison !== 0) {
                        return dateComparison;
                      }
                      return (
                        parseInt(a.fields.starttime.integerValue) -
                        parseInt(b.fields.starttime.integerValue)
                      );
                    });
                    function formatTime(militaryTime) {
                      if (militaryTime === 0) {
                        return "Midnight";
                      }
                      let hours = Math.floor(militaryTime / 100);
                      let minutes = militaryTime % 100;
                      let period = hours < 12 ? "AM" : "PM";
                      if (hours === 0) {
                        hours = 12;
                      } else if (hours > 12) {
                        hours -= 12;
                      }
                      let formattedMinutes =
                        minutes < 10 ? `0${minutes}` : minutes;
                      return `${hours}:${formattedMinutes}${period}`;
                    }
                    const dayNames = {
                      "1": "SUNDAY",
                      "2": "MONDAY",
                      "3": "TUESDAY",
                      "4": "WEDNESDAY",
                      "5": "THURSDAY",
                      "6": "FRIDAY",
                      "7": "SATURDAY"
                    };
                    return (data = data.map(item => {
                      return {
                        ...item,
                        date_text:
                          dayNames[item.fields.date.integerValue] ||
                          item.fields.date.integerValue,
                        starttime_number: formatTime(
                          parseInt(item.fields.starttime.integerValue)
                        ),
                        endtime_number: formatTime(
                          parseInt(item.fields.endtime.integerValue)
                        )
                      };
                    }));
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xPudd)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__meYkv)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__luEx4
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.date_text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kxclW
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              currentItem.starttime_number +
                              " - " +
                              currentItem.endtime_number
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bC2
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.fields["walk-in-rate"]
                            .integerValue;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lY8LL
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (() => {
                            if (
                              currentItem.fields["game-rate"].integerValue == 0
                            ) {
                              return "N/A";
                            } else {
                              return currentItem.fields["game-rate"]
                                .integerValue;
                            }
                          })();
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "4$";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w7ZrJ
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.fields.rate.integerValue;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "80";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              );
            })
          : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRatesWidget__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRatesWidget__VariantsArgs;
    args?: PlasmicRatesWidget__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRatesWidget__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRatesWidget__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRatesWidget__ArgProps,
          internalVariantPropNames: PlasmicRatesWidget__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRatesWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRatesWidget";
  } else {
    func.displayName = `PlasmicRatesWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicRatesWidget = Object.assign(
  // Top-level PlasmicRatesWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicRatesWidget
    internalVariantProps: PlasmicRatesWidget__VariantProps,
    internalArgProps: PlasmicRatesWidget__ArgProps
  }
);

export default PlasmicRatesWidget;
/* prettier-ignore-end */
