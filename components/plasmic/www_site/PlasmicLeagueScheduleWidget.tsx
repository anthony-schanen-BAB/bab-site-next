// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5wfiQsykEjzgVqMWi3s1vV
// Component: OL6XpRfJT26M

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdTextArea_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5wfiQsykEjzgVqMWi3s1vV/projectcss
import sty from "./PlasmicLeagueScheduleWidget.module.css"; // plasmic-import: OL6XpRfJT26M/css

createPlasmicElementProxy;

export type PlasmicLeagueScheduleWidget__VariantMembers = {};
export type PlasmicLeagueScheduleWidget__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeagueScheduleWidget__VariantsArgs;
export const PlasmicLeagueScheduleWidget__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLeagueScheduleWidget__ArgsType = {
  center?: string;
};
type ArgPropType = keyof PlasmicLeagueScheduleWidget__ArgsType;
export const PlasmicLeagueScheduleWidget__ArgProps = new Array<ArgPropType>(
  "center"
);

export type PlasmicLeagueScheduleWidget__OverridesType = {
  root?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  accordionLeagueSchedule?: Flex__<typeof AntdAccordion>;
  leagueItem?: Flex__<typeof AntdAccordionItem>;
  columns?: Flex__<"div">;
  form?: Flex__<typeof FormWrapper>;
  nameField?: Flex__<typeof FormItemWrapper>;
  input?: Flex__<typeof AntdInput>;
  emailField?: Flex__<typeof FormItemWrapper>;
  emailInput2?: Flex__<typeof AntdInput>;
  messageField?: Flex__<typeof FormItemWrapper>;
  textArea?: Flex__<typeof AntdTextArea>;
  formField?: Flex__<typeof FormItemWrapper>;
  radioGroup?: Flex__<typeof AntdRadioGroup>;
  button?: Flex__<typeof AntdButton>;
};

export interface DefaultLeagueScheduleWidgetProps {
  center?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLeagueScheduleWidget__RenderFunc(props: {
  variants: PlasmicLeagueScheduleWidget__VariantsArgs;
  args: PlasmicLeagueScheduleWidget__ArgsType;
  overrides: PlasmicLeagueScheduleWidget__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "accordionLeagueSchedule.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "form[].value",
        type: "private",
        variableType: "object",

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form[].isSubmitting",
        type: "private",
        variableType: "boolean",

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "emailInput2[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "textArea[].value",
        type: "private",
        variableType: "text",

        onMutate: generateOnMutateForSpec("value", AntdTextArea_Helpers)
      },
      {
        path: "radioGroup[].value",
        type: "private",
        variableType: "text"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "AZSEh7u3YtigAZKbPvRRs",
        opId: "9e434066-30e0-45dd-9741-d624bf9d2225",
        userArgs: {},
        cacheKey: `plasmic.$.9e434066-30e0-45dd-9741-d624bf9d2225.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__oGywo)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__bwUfb)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"70px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/www_site/images/whiteLogopng.png",
              fullWidth: 450,
              fullHeight: 495,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__w0VaA
            )}
          >
            {"LEAGUE SCHEDULE"}
          </div>
        </Stack__>
        {(() => {
          try {
            return !!$props.center;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? (() => {
              const child$Props = {
                activeKey: generateStateValueProp($state, [
                  "accordionLeagueSchedule",
                  "activePanelId"
                ]),
                bordered: false,
                className: classNames(
                  "__wab_instance",
                  sty.accordionLeagueSchedule
                ),
                collapsible: "header",
                defaultActiveKey: ``,
                destroyInactivePanel: false,
                disabled: false,
                expandIconPosition: "start",
                forceRender: false,
                ghost: false,
                items: (_par =>
                  !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                  (() => {
                    try {
                      return (() => {
                        const daysOrder = [
                          "Sunday",
                          "Monday",
                          "Tuesday",
                          "Wednesday",
                          "Thursday",
                          "Friday",
                          "Saturday"
                        ];

                        function parsePlayTime(playTime) {
                          const [day, time] = playTime.split(" - ");
                          const dayIndex = daysOrder.indexOf(day);
                          let [hour, minute] = time
                            .match(/(\d+):(\d+)/)
                            .slice(1, 3);
                          const period = time.slice(-1);
                          if (period === "p" && hour !== "12") {
                            hour = parseInt(hour) + 12;
                          } else if (period === "a" && hour === "12") {
                            hour = "00";
                          }
                          return {
                            dayIndex,
                            hour,
                            minute
                          };
                        }
                        function filterDocumentsByCenter(documents, center) {
                          return documents.filter(doc => {
                            const leagueNumber =
                              doc.fields["league-number"].integerValue;
                            if (center === "Glendale") {
                              return leagueNumber.toString().startsWith("1");
                            } else if (center === "Northridge") {
                              return leagueNumber.toString().startsWith("2");
                            }
                            return true;
                          });
                        }
                        const center = $props.center;
                        const filteredDocuments = filterDocumentsByCenter(
                          $queries.query.data.response.documents,
                          center
                        );
                        return filteredDocuments.sort((a, b) => {
                          const timeA = parsePlayTime(
                            a.fields["play-time"].stringValue
                          );
                          const timeB = parsePlayTime(
                            b.fields["play-time"].stringValue
                          );
                          if (timeA.dayIndex !== timeB.dayIndex) {
                            return timeA.dayIndex - timeB.dayIndex;
                          }
                          if (timeA.hour !== timeB.hour) {
                            return timeA.hour - timeB.hour;
                          }
                          return timeA.minute - timeB.minute;
                        });
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()
                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                  const currentItem = __plasmic_item_0;
                  const currentIndex = __plasmic_idx_0;
                  return (
                    <AntdAccordionItem
                      data-plasmic-name={"leagueItem"}
                      data-plasmic-override={overrides.leagueItem}
                      className={classNames("__wab_instance", sty.leagueItem)}
                      headerClass={classNames({
                        [sty["pcls_lhOZjkI8ogO-"]]: true
                      })}
                      id={(() => {
                        try {
                          return currentItem.name;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      key={currentIndex}
                      label2={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nbRk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cip14
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.fields["play-time"]
                                    .stringValue;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "N/A";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ztGn2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return currentItem.fields["league-name"]
                                    .stringValue;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Nevada Bums";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uZoFr
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Week " +
                                    currentItem.fields["current-week"]
                                      .integerValue +
                                    "/" +
                                    currentItem.fields["weeks"].integerValue
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "Week 14/24";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      }
                      showArrow={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sYkn0
                        )}
                      >
                        {"DETAILS"}
                      </div>
                      <div
                        data-plasmic-name={"columns"}
                        data-plasmic-override={overrides.columns}
                        className={classNames(projectcss.all, sty.columns)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column___95Y0D
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__lIuTq
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Establishing Games: " +
                                    currentItem.fields["establishing-games"]
                                      .integerValue
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wbGrb
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Lineage:  $" +
                                    currentItem.fields.lineage.doubleValue
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__me4EZ
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Start Date: " +
                                    currentItem.fields["start-date"].stringValue
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vMSqs
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Ends: " +
                                    currentItem.fields["end-date"].stringValue
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__k9EiI
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Handicap Celing: " +
                                    currentItem.fields["handicap-ceiling"]
                                      .integerValue
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nq0L5
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Byes: " +
                                    currentItem.fields.byes.stringValue
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oYzOs
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "Dues: " +
                                    currentItem.fields.dues.doubleValue
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__vveCh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tEqfg
                            )}
                          >
                            {"Want to join this league? Send an inquiry!"}
                          </div>
                          {(() => {
                            const child$Props = {
                              className: classNames("__wab_instance", sty.form),
                              extendedOnValuesChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "value",
                                  ["form", __plasmic_idx_0, "value"],
                                  FormWrapper_Helpers
                                ),
                              formItems: [
                                {
                                  label: "Name",
                                  name: "name",
                                  inputType: "Text"
                                },
                                {
                                  label: "Message",
                                  name: "message",
                                  inputType: "Text Area"
                                }
                              ],
                              labelCol: { span: 8, horizontalOnly: true },
                              layout: "vertical",
                              mode: "advanced",
                              onFinish: async values => {
                                const $steps = {};

                                $steps["updateAccordionActivePanelId2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        dataOp: {
                                          sourceId: "6C5GutKknwRfikZFCLEAXU",
                                          opId: "af9fe478-9407-43b1-bcec-b2c6d08f5c06",
                                          userArgs: {
                                            body: [
                                              $state.form[currentIndex],
                                              currentItem.fields
                                            ]
                                          },
                                          cacheKey: null,
                                          invalidatedKeys: [
                                            "plasmic_refresh_all"
                                          ],
                                          roleId: null
                                        }
                                      };
                                      return (async ({
                                        dataOp,
                                        continueOnError
                                      }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken,
                                              user: dataSourcesCtx?.user
                                            });
                                          await plasmicInvalidate(
                                            dataOp.invalidatedKeys
                                          );
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateAccordionActivePanelId2"] !=
                                    null &&
                                  typeof $steps[
                                    "updateAccordionActivePanelId2"
                                  ] === "object" &&
                                  typeof $steps["updateAccordionActivePanelId2"]
                                    .then === "function"
                                ) {
                                  $steps["updateAccordionActivePanelId2"] =
                                    await $steps[
                                      "updateAccordionActivePanelId2"
                                    ];
                                }

                                $steps[
                                  "updateAccordionLeagueScheduleActivePanelId"
                                ] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: [
                                            "accordionLeagueSchedule",
                                            "activePanelId"
                                          ]
                                        },
                                        operation: 0
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps[
                                    "updateAccordionLeagueScheduleActivePanelId"
                                  ] != null &&
                                  typeof $steps[
                                    "updateAccordionLeagueScheduleActivePanelId"
                                  ] === "object" &&
                                  typeof $steps[
                                    "updateAccordionLeagueScheduleActivePanelId"
                                  ].then === "function"
                                ) {
                                  $steps[
                                    "updateAccordionLeagueScheduleActivePanelId"
                                  ] = await $steps[
                                    "updateAccordionLeagueScheduleActivePanelId"
                                  ];
                                }
                              },
                              onFinishFailed: async data => {
                                const $steps = {};
                              },
                              onIsSubmittingChange:
                                generateStateOnChangePropForCodeComponents(
                                  $state,
                                  "isSubmitting",
                                  ["form", __plasmic_idx_0, "isSubmitting"],
                                  FormWrapper_Helpers
                                ),
                              ref: ref => {
                                $refs["form"] = ref;
                              },
                              submitSlot: null,
                              wrapperCol: { span: 16, horizontalOnly: true }
                            };
                            initializeCodeComponentStates(
                              $state,
                              [
                                {
                                  name: "value",
                                  plasmicStateName: "form[].value"
                                },
                                {
                                  name: "isSubmitting",
                                  plasmicStateName: "form[].isSubmitting"
                                }
                              ],
                              [__plasmic_idx_0],
                              FormWrapper_Helpers ?? {},
                              child$Props
                            );

                            return (
                              <FormWrapper
                                data-plasmic-name={"form"}
                                data-plasmic-override={overrides.form}
                                {...child$Props}
                              >
                                <FormItemWrapper
                                  data-plasmic-name={"nameField"}
                                  data-plasmic-override={overrides.nameField}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.nameField
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gcIyn
                                      )}
                                    >
                                      {"Name"}
                                    </div>
                                  }
                                  name={"name"}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.input
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          ["input", __plasmic_idx_0, "value"],
                                          AntdInput_Helpers
                                        ),
                                      value: generateStateValueProp($state, [
                                        "input",
                                        __plasmic_idx_0,
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "input[].value"
                                        }
                                      ],
                                      [__plasmic_idx_0],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "input[].value",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <AntdInput
                                        data-plasmic-name={"input"}
                                        data-plasmic-override={overrides.input}
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <FormItemWrapper
                                  data-plasmic-name={"emailField"}
                                  data-plasmic-override={overrides.emailField}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.emailField
                                  )}
                                  initialValue={``}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__fum2W
                                      )}
                                    >
                                      {"Email"}
                                    </div>
                                  }
                                  name={"emailData"}
                                  noLabel={false}
                                  rules={[
                                    { ruleType: "required" },

                                    {
                                      ruleType: "advanced",
                                      options: [],
                                      custom: (rule, value) => {
                                        return (() => {
                                          const emailRegex =
                                            /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                                          return emailRegex.test(
                                            $state.form[currentIndex].value
                                              .emailData
                                          );
                                        })();
                                      },
                                      message: "Please enter a valid email"
                                    }
                                  ]}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.emailInput2
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          [
                                            "emailInput2",
                                            __plasmic_idx_0,
                                            "value"
                                          ],
                                          AntdInput_Helpers
                                        ),
                                      placeholder: "yourname@yourEmail",
                                      value: generateStateValueProp($state, [
                                        "emailInput2",
                                        __plasmic_idx_0,
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName:
                                            "emailInput2[].value"
                                        }
                                      ],
                                      [__plasmic_idx_0],
                                      AntdInput_Helpers ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "emailInput2[].value",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <AntdInput
                                        data-plasmic-name={"emailInput2"}
                                        data-plasmic-override={
                                          overrides.emailInput2
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <FormItemWrapper
                                  data-plasmic-name={"messageField"}
                                  data-plasmic-override={overrides.messageField}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.messageField
                                  )}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__rOyXe
                                      )}
                                    >
                                      {"Message"}
                                    </div>
                                  }
                                  name={"message"}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.textArea
                                      ),
                                      onChange:
                                        generateStateOnChangePropForCodeComponents(
                                          $state,
                                          "value",
                                          [
                                            "textArea",
                                            __plasmic_idx_0,
                                            "value"
                                          ],
                                          AntdTextArea_Helpers
                                        ),
                                      value: generateStateValueProp($state, [
                                        "textArea",
                                        __plasmic_idx_0,
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "textArea[].value"
                                        }
                                      ],
                                      [__plasmic_idx_0],
                                      AntdTextArea_Helpers ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "textArea[].value",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <AntdTextArea
                                        data-plasmic-name={"textArea"}
                                        data-plasmic-override={
                                          overrides.textArea
                                        }
                                        {...child$Props}
                                      />
                                    );
                                  })()}
                                </FormItemWrapper>
                                <FormItemWrapper
                                  data-plasmic-name={"formField"}
                                  data-plasmic-override={overrides.formField}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.formField
                                  )}
                                  initialValue={"This Season"}
                                  label={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__pEi6H
                                      )}
                                    >
                                      {"When would you like to join?"}
                                    </div>
                                  }
                                  name={"seasonOptions"}
                                  rules={[{ ruleType: "required" }]}
                                >
                                  {(() => {
                                    const child$Props = {
                                      className: classNames(
                                        "__wab_instance",
                                        sty.radioGroup
                                      ),
                                      onChange: generateStateOnChangeProp(
                                        $state,
                                        ["radioGroup", __plasmic_idx_0, "value"]
                                      ),
                                      options: (() => {
                                        const __composite = [
                                          {
                                            type: "option",
                                            label: null,
                                            value: null
                                          },
                                          {
                                            type: "option",
                                            label: null,
                                            value: null
                                          }
                                        ];
                                        __composite["0"]["label"] =
                                          "This season";
                                        __composite["0"]["value"] =
                                          "This Season";
                                        __composite["1"]["label"] =
                                          "Next Season";
                                        __composite["1"]["value"] =
                                          "Next Season";
                                        return __composite;
                                      })(),

                                      value: generateStateValueProp($state, [
                                        "radioGroup",
                                        __plasmic_idx_0,
                                        "value"
                                      ])
                                    };
                                    initializeCodeComponentStates(
                                      $state,
                                      [
                                        {
                                          name: "value",
                                          plasmicStateName: "radioGroup[].value"
                                        }
                                      ],
                                      [__plasmic_idx_0],
                                      undefined ?? {},
                                      child$Props
                                    );
                                    initializePlasmicStates(
                                      $state,
                                      [
                                        {
                                          name: "radioGroup[].value",
                                          initFunc: ({
                                            $props,
                                            $state,
                                            $queries
                                          }) => undefined
                                        }
                                      ],
                                      [__plasmic_idx_0]
                                    );
                                    return (
                                      <AntdRadioGroup
                                        data-plasmic-name={"radioGroup"}
                                        data-plasmic-override={
                                          overrides.radioGroup
                                        }
                                        {...child$Props}
                                      >
                                        <AntdRadio
                                          className={classNames(
                                            "__wab_instance",
                                            sty.radio__an1Hg
                                          )}
                                          value={"op1"}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__t2Yna
                                            )}
                                          >
                                            {"Option 1"}
                                          </div>
                                        </AntdRadio>
                                        <AntdRadio
                                          className={classNames(
                                            "__wab_instance",
                                            sty.radio__mJq7D
                                          )}
                                          value={"op2"}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__jQnUu
                                            )}
                                          >
                                            {"Option 2"}
                                          </div>
                                        </AntdRadio>
                                      </AntdRadioGroup>
                                    );
                                  })()}
                                </FormItemWrapper>
                                <AntdButton
                                  data-plasmic-name={"button"}
                                  data-plasmic-override={overrides.button}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button
                                  )}
                                  ghost={false}
                                  onClick={async () => {
                                    const $steps = {};
                                  }}
                                  submitsForm={true}
                                  type={"primary"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__tEk90
                                    )}
                                  >
                                    {"Submit"}
                                  </div>
                                </AntdButton>
                              </FormWrapper>
                            );
                          })()}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tHu8C
                            )}
                          >
                            {
                              "inquiries will be sent to this leagues coordinator"
                            }
                          </div>
                        </div>
                      </div>
                    </AntdAccordionItem>
                  );
                }),
                onChange: generateStateOnChangePropForCodeComponents(
                  $state,
                  "activePanelId",
                  ["accordionLeagueSchedule", "activePanelId"],
                  AntdAccordion_Helpers
                )
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "activePanelId",
                    plasmicStateName: "accordionLeagueSchedule.activePanelId"
                  }
                ],
                [],
                AntdAccordion_Helpers ?? {},
                child$Props
              );

              return (
                <AntdAccordion
                  data-plasmic-name={"accordionLeagueSchedule"}
                  data-plasmic-override={overrides.accordionLeagueSchedule}
                  {...child$Props}
                />
              );
            })()
          : null}
      </Stack__>
      {(() => {
        try {
          return !$props.center;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kvb4
          )}
        >
          {"Please select a location to view the league schedule"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "accordionLeagueSchedule",
    "leagueItem",
    "columns",
    "form",
    "nameField",
    "input",
    "emailField",
    "emailInput2",
    "messageField",
    "textArea",
    "formField",
    "radioGroup",
    "button"
  ],
  img: ["img"],
  accordionLeagueSchedule: [
    "accordionLeagueSchedule",
    "leagueItem",
    "columns",
    "form",
    "nameField",
    "input",
    "emailField",
    "emailInput2",
    "messageField",
    "textArea",
    "formField",
    "radioGroup",
    "button"
  ],
  leagueItem: [
    "leagueItem",
    "columns",
    "form",
    "nameField",
    "input",
    "emailField",
    "emailInput2",
    "messageField",
    "textArea",
    "formField",
    "radioGroup",
    "button"
  ],
  columns: [
    "columns",
    "form",
    "nameField",
    "input",
    "emailField",
    "emailInput2",
    "messageField",
    "textArea",
    "formField",
    "radioGroup",
    "button"
  ],
  form: [
    "form",
    "nameField",
    "input",
    "emailField",
    "emailInput2",
    "messageField",
    "textArea",
    "formField",
    "radioGroup",
    "button"
  ],
  nameField: ["nameField", "input"],
  input: ["input"],
  emailField: ["emailField", "emailInput2"],
  emailInput2: ["emailInput2"],
  messageField: ["messageField", "textArea"],
  textArea: ["textArea"],
  formField: ["formField", "radioGroup"],
  radioGroup: ["radioGroup"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof PlasmicImg__;
  accordionLeagueSchedule: typeof AntdAccordion;
  leagueItem: typeof AntdAccordionItem;
  columns: "div";
  form: typeof FormWrapper;
  nameField: typeof FormItemWrapper;
  input: typeof AntdInput;
  emailField: typeof FormItemWrapper;
  emailInput2: typeof AntdInput;
  messageField: typeof FormItemWrapper;
  textArea: typeof AntdTextArea;
  formField: typeof FormItemWrapper;
  radioGroup: typeof AntdRadioGroup;
  button: typeof AntdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeagueScheduleWidget__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeagueScheduleWidget__VariantsArgs;
    args?: PlasmicLeagueScheduleWidget__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeagueScheduleWidget__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLeagueScheduleWidget__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeagueScheduleWidget__ArgProps,
          internalVariantPropNames: PlasmicLeagueScheduleWidget__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLeagueScheduleWidget__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeagueScheduleWidget";
  } else {
    func.displayName = `PlasmicLeagueScheduleWidget.${nodeName}`;
  }
  return func;
}

export const PlasmicLeagueScheduleWidget = Object.assign(
  // Top-level PlasmicLeagueScheduleWidget renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    accordionLeagueSchedule: makeNodeComponent("accordionLeagueSchedule"),
    leagueItem: makeNodeComponent("leagueItem"),
    columns: makeNodeComponent("columns"),
    form: makeNodeComponent("form"),
    nameField: makeNodeComponent("nameField"),
    input: makeNodeComponent("input"),
    emailField: makeNodeComponent("emailField"),
    emailInput2: makeNodeComponent("emailInput2"),
    messageField: makeNodeComponent("messageField"),
    textArea: makeNodeComponent("textArea"),
    formField: makeNodeComponent("formField"),
    radioGroup: makeNodeComponent("radioGroup"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicLeagueScheduleWidget
    internalVariantProps: PlasmicLeagueScheduleWidget__VariantProps,
    internalArgProps: PlasmicLeagueScheduleWidget__ArgProps
  }
);

export default PlasmicLeagueScheduleWidget;
/* prettier-ignore-end */
