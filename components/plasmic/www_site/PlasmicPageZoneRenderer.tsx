// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5wfiQsykEjzgVqMWi3s1vV
// Component: 5Y20vviCdvey

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { ConditionGuard } from "@plasmicpkgs/plasmic-basic-components";
import MainWelcome from "../../MainWelcome"; // plasmic-import: c1IgRoFQrCHU/component
import OverflowBlurb from "../../OverflowBlurb"; // plasmic-import: ap0zrG-_Q0mJ/component
import MenuItem from "../../MenuItem"; // plasmic-import: wf5AIWq7ggDx/component
import MenuItemImage from "../../MenuItemImage"; // plasmic-import: t2lTgwsfEcjo/component
import MenuItemImageLeft from "../../MenuItemImageLeft"; // plasmic-import: 9iXlWDi6dlRr/component
import MenuSection from "../../MenuSection"; // plasmic-import: nrOU8hQO8wWv/component
import Carousel from "../../Carousel"; // plasmic-import: sh8bP5PzV6yl/component
import ClassicBlurb from "../../ClassicBlurb"; // plasmic-import: hp5PifVBePqo/component
import Button from "../../Button"; // plasmic-import: XkuaKd-CXmfR/component
import RatesWidget from "../../RatesWidget"; // plasmic-import: e6aLe1etcU9D/component
import LeagueScheduleWidget from "../../LeagueScheduleWidget"; // plasmic-import: OL6XpRfJT26M/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5wfiQsykEjzgVqMWi3s1vV/projectcss
import sty from "./PlasmicPageZoneRenderer.module.css"; // plasmic-import: 5Y20vviCdvey/css

import { marked as __lib_marked } from "marked";

createPlasmicElementProxy;

export type PlasmicPageZoneRenderer__VariantMembers = {};
export type PlasmicPageZoneRenderer__VariantsArgs = {};
type VariantPropType = keyof PlasmicPageZoneRenderer__VariantsArgs;
export const PlasmicPageZoneRenderer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPageZoneRenderer__ArgsType = {
  zoneId?: string;
  pageZoneObject?: any;
  locationProp1?: string;
  locationState?: string;
  onLocationStateChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicPageZoneRenderer__ArgsType;
export const PlasmicPageZoneRenderer__ArgProps = new Array<ArgPropType>(
  "zoneId",
  "pageZoneObject",
  "locationProp1",
  "locationState",
  "onLocationStateChange"
);

export type PlasmicPageZoneRenderer__OverridesType = {
  root?: Flex__<"section">;
  mainWelcomeConditionalGuard?: Flex__<typeof ConditionGuard>;
  mainWelcome?: Flex__<typeof MainWelcome>;
  h1?: Flex__<"h1">;
  overflowBlurbConditionalGuard?: Flex__<typeof ConditionGuard>;
  overflowBlurb?: Flex__<typeof OverflowBlurb>;
  menuItem?: Flex__<typeof ConditionGuard>;
  menuItemName?: Flex__<"div">;
  menuItemDescription?: Flex__<"div">;
  menuItemImage?: Flex__<typeof ConditionGuard>;
  menuItemImageLeft?: Flex__<typeof ConditionGuard>;
  menuSection?: Flex__<typeof ConditionGuard>;
  carousel?: Flex__<typeof ConditionGuard>;
  buttonBlurb?: Flex__<typeof ConditionGuard>;
  classicBlurb?: Flex__<typeof ClassicBlurb>;
  ratesWidget?: Flex__<typeof ConditionGuard>;
  leagueScheduleWidget?: Flex__<typeof ConditionGuard>;
};

export interface DefaultPageZoneRendererProps {
  zoneId?: string;
  pageZoneObject?: any;
  locationProp1?: string;
  locationState?: string;
  onLocationStateChange?: (val: string) => void;
  className?: string;
}

const $$ = {
  marked: __lib_marked
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageZoneRenderer__RenderFunc(props: {
  variants: PlasmicPageZoneRenderer__VariantsArgs;
  args: PlasmicPageZoneRenderer__ArgsType;
  overrides: PlasmicPageZoneRenderer__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "locationState",
        type: "writable",
        variableType: "text",

        valueProp: "locationState",
        onChangeProp: "onLocationStateChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    pageZoneQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bLRLN2gabmtZZKnFRpxBVX",
        opId: "ee3f9bd3-0bbc-447e-83ec-6877b38156e6",
        userArgs: {
          path: [$props.zoneId]
        },
        cacheKey: `plasmic.$.ee3f9bd3-0bbc-447e-83ec-6877b38156e6.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    overflowBlurbGetImage: usePlasmicDataOp(() => {
      return {
        sourceId: "bLRLN2gabmtZZKnFRpxBVX",
        opId: "a5c2ad48-1d88-41d8-a236-b2a141035c6e",
        userArgs: {
          path: [$queries.pageZoneQuery.data.response.fields.image.sys.id]
        },
        cacheKey: `plasmic.$.a5c2ad48-1d88-41d8-a236-b2a141035c6e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    menuItemImageQuery: usePlasmicDataOp(() => {
      return {
        sourceId: "bLRLN2gabmtZZKnFRpxBVX",
        opId: "a5c2ad48-1d88-41d8-a236-b2a141035c6e",
        userArgs: {
          path: [$queries.pageZoneQuery.data.response.fields.photo.sys.id]
        },
        cacheKey: `plasmic.$.a5c2ad48-1d88-41d8-a236-b2a141035c6e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    carouselObjects: usePlasmicDataOp(() => {
      return {
        sourceId: "bLRLN2gabmtZZKnFRpxBVX",
        opId: "3d482441-bb14-45e0-9972-652824db91fa",
        userArgs: {
          path: [$queries.pageZoneQuery.data.response.sys.id]
        },
        cacheKey: `plasmic.$.3d482441-bb14-45e0-9972-652824db91fa.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ConditionGuard
        data-plasmic-name={"mainWelcomeConditionalGuard"}
        data-plasmic-override={overrides.mainWelcomeConditionalGuard}
        className={classNames(
          "__wab_instance",
          sty.mainWelcomeConditionalGuard
        )}
        condition={(() => {
          try {
            return (
              $queries.pageZoneQuery.data.response.sys.contentType.sys.id ==
              "mainWelcome"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
      >
        <MainWelcome
          data-plasmic-name={"mainWelcome"}
          data-plasmic-override={overrides.mainWelcome}
          children2={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nxgki
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                {
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.pageZoneQuery.data.response.fields
                            .title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "WELCOME";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </h1>
                }
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          }
          children3={
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__shhi
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{
                  __html: (() => {
                    try {
                      return (() => {
                        $$.marked.use({
                          gfm: true,
                          breaks: true
                        });
                        const text =
                          $queries.pageZoneQuery.data.response.fields.text;
                        if (text) {
                          return $$.marked.parse(
                            $queries.pageZoneQuery.data.response.fields.text
                          );
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "We have two bowling alleys in Glendale and Northridge with state of the art lanes, billiards, arcade games & a great menu to order from!\n\nWe recommend you call the center before coming in to check our availability.\n\nIf you would like to book a reservation, it must be booked at least 12 hours in advance and must be pre paid through our online booking portal. To make a reservation Click Here!\n\nExtreme Bowling starts at approximately 9PM on Friday Nights (immediately after league) and 8PM on Saturday Nights!\n\nWe ask that guests refrain from bringing outside food or drinks into our centers. \n\nBack Alley Bowling Northridge (Previously Matador Bowl) has been a neighborhood landmark since 1960, when we first opened our doors to the Northridge community. Over the years we've loved getting to know our patrons, and are always finding new ways to show them a great time.\n\nEstablished in 1970, Back Alley Bowling Glendale (Previously Jewel City  Bowl) has been in business for more than 50 years. Making sure our staff's here to ensure that your family has a great time is our top priority, our lanes are always welcome to show our guests the best bowling experience they could hope to find for any occasion- Whether it be a special occasion, league night, or even just a family outing on the lanes!\n";
                      }
                      throw e;
                    }
                  })()
                }}
              />
            </p>
          }
          className={classNames("__wab_instance", sty.mainWelcome)}
          locationProp={(() => {
            try {
              return $props.locationProp1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </ConditionGuard>
      <ConditionGuard
        data-plasmic-name={"overflowBlurbConditionalGuard"}
        data-plasmic-override={overrides.overflowBlurbConditionalGuard}
        className={classNames(
          "__wab_instance",
          sty.overflowBlurbConditionalGuard
        )}
        condition={(() => {
          try {
            return (
              $queries.pageZoneQuery.data.response.sys.contentType.sys.id ==
              "overflowBlurb"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
      >
        <OverflowBlurb
          data-plasmic-name={"overflowBlurb"}
          data-plasmic-override={overrides.overflowBlurb}
          className={classNames("__wab_instance", sty.overflowBlurb)}
          slot={
            <p
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p__nKHl8
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{
                  __html: (() => {
                    try {
                      return (() => {
                        $$.marked.use({
                          gfm: true,
                          breaks: true
                        });
                        const text =
                          $queries.pageZoneQuery.data.response.fields.text;
                        if (text) {
                          return $$.marked.parse(
                            $queries.pageZoneQuery.data.response.fields.text
                          );
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "There are plenty of perks to bowling with us in a league! Here are just a handful of examples:\n\ndiscounted practice bowling\nonline access to your bowling history\nonline access to league standings\nability to change your game display name\nauto pay league fee payments\nexclusive access to special member events\nleague specific benefits such as gear and refreshments\nexclusive referral benefits for events\nonline access to real-time brackets\ndiscounted food and beverage during league play\n...and so much more! Join us for our league play and take part in the fun!";
                      }
                      throw e;
                    }
                  })()
                }}
              />
            </p>
          }
          slot2={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__pzOz)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.overflowBlurbGetImage.data.response.fields
                    .file.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      src: "/plasmic/www_site/images/image4.png",
                      fullWidth: 1506,
                      fullHeight: 1202,
                      aspectRatio: undefined
                    };
                  }
                  throw e;
                }
              })()}
            />
          }
          slot3={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gnXts
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.pageZoneQuery.data.response.fields.footer;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Questions? Contact our league coordinators! \nCall 818-892-8677 or email leaguesnr@backalleybowling.com";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
          slot4={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img___8Uu2)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.overflowBlurbGetImage.data.response.fields
                    .file.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      src: "/plasmic/www_site/images/image4.png",
                      fullWidth: 1506,
                      fullHeight: 1202,
                      aspectRatio: undefined
                    };
                  }
                  throw e;
                }
              })()}
            />
          }
        >
          <React.Fragment>
            {(() => {
              try {
                return $queries.pageZoneQuery.data.response.fields.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "BOWL IN ONE OF OUR LEAGUES!";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </OverflowBlurb>
      </ConditionGuard>
      <ConditionGuard
        data-plasmic-name={"menuItem"}
        data-plasmic-override={overrides.menuItem}
        className={classNames("__wab_instance", sty.menuItem)}
        condition={(() => {
          try {
            return (
              $queries.pageZoneQuery.data.response.sys.contentType.sys.id ==
                "menuItem" &&
              $queries.pageZoneQuery.data.response.fields.type == "No Image"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
      >
        <MenuItem
          className={classNames("__wab_instance", sty.menuItem__sezIk)}
          slot={
            <div
              data-plasmic-name={"menuItemDescription"}
              data-plasmic-override={overrides.menuItemDescription}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.menuItemDescription
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.pageZoneQuery.data.response.fields
                      .description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          }
        >
          <div
            data-plasmic-name={"menuItemName"}
            data-plasmic-override={overrides.menuItemName}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.menuItemName
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.pageZoneQuery.data.response.fields.nameOfItem;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </MenuItem>
      </ConditionGuard>
      <ConditionGuard
        data-plasmic-name={"menuItemImage"}
        data-plasmic-override={overrides.menuItemImage}
        className={classNames("__wab_instance", sty.menuItemImage)}
        condition={(() => {
          try {
            return (
              $queries.pageZoneQuery.data.response.sys.contentType.sys.id ==
                "menuItem" &&
              $queries.pageZoneQuery.data.response.fields.type == "Image"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
      >
        <MenuItemImage
          className={classNames("__wab_instance", sty.menuItemImage___8L6Mc)}
          slot={
            <React.Fragment>
              {(() => {
                try {
                  return $queries.pageZoneQuery.data.response.fields
                    .description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
          slot2={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__mLlKi)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.menuItemImageQuery.data.response.fields.file
                    .url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      src: "/plasmic/www_site/images/image6.png",
                      fullWidth: 1038,
                      fullHeight: 386,
                      aspectRatio: undefined
                    };
                  }
                  throw e;
                }
              })()}
            />
          }
        >
          <React.Fragment>
            {(() => {
              try {
                return $queries.pageZoneQuery.data.response.fields.nameOfItem;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </MenuItemImage>
      </ConditionGuard>
      <ConditionGuard
        data-plasmic-name={"menuItemImageLeft"}
        data-plasmic-override={overrides.menuItemImageLeft}
        className={classNames("__wab_instance", sty.menuItemImageLeft)}
        condition={(() => {
          try {
            return (
              $queries.pageZoneQuery.data.response.sys.contentType.sys.id ==
                "menuItem" &&
              $queries.pageZoneQuery.data.response.fields.type ==
                "Image Reverse"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
      >
        <MenuItemImageLeft
          className={classNames("__wab_instance", sty.menuItemImageLeft__xbmRf)}
          slot={
            <React.Fragment>
              {(() => {
                try {
                  return $queries.pageZoneQuery.data.response.fields
                    .description;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
          slot2={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__gDjO2)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.menuItemImageQuery.data.response.fields.file
                    .url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return {
                      src: "/plasmic/www_site/images/image6.png",
                      fullWidth: 1038,
                      fullHeight: 386,
                      aspectRatio: undefined
                    };
                  }
                  throw e;
                }
              })()}
            />
          }
        >
          <React.Fragment>
            {(() => {
              try {
                return $queries.pageZoneQuery.data.response.fields.nameOfItem;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </MenuItemImageLeft>
      </ConditionGuard>
      <ConditionGuard
        data-plasmic-name={"menuSection"}
        data-plasmic-override={overrides.menuSection}
        className={classNames("__wab_instance", sty.menuSection)}
        condition={true}
      >
        <MenuSection
          className={classNames("__wab_instance", sty.menuSection__eetAi)}
        >
          <React.Fragment>
            {(() => {
              try {
                return $queries.pageZoneQuery.data.response.fields.sectionName;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "SECTION NAME";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </MenuSection>
      </ConditionGuard>
      <ConditionGuard
        data-plasmic-name={"carousel"}
        data-plasmic-override={overrides.carousel}
        className={classNames("__wab_instance", sty.carousel)}
        condition={(() => {
          try {
            return (
              $queries.pageZoneQuery.data.response.sys.contentType.sys.id ==
              "carousel"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
      >
        <Carousel
          className={classNames("__wab_instance", sty.carousel__cjpJy)}
          slot={
            <React.Fragment>
              {(() => {
                try {
                  return $queries.pageZoneQuery.data.response.fields.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Upcoming events and notices!";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.carouselObjects.data.response.includes.Asset;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__syQIs)}
                key={currentIndex}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rpudh)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__zYSig)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"520px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return currentItem.fields.file.url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return {
                            src: "/plasmic/www_site/images/terminalpng.png",
                            fullWidth: 624,
                            fullHeight: 333,
                            aspectRatio: undefined
                          };
                        }
                        throw e;
                      }
                    })()}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__swDgr
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return currentItem.fields.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "wert";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Stack__>
              </div>
            );
          })}
        </Carousel>
      </ConditionGuard>
      <ConditionGuard
        data-plasmic-name={"buttonBlurb"}
        data-plasmic-override={overrides.buttonBlurb}
        className={classNames("__wab_instance", sty.buttonBlurb)}
        condition={(() => {
          try {
            return (
              $queries.pageZoneQuery.data.response.sys.contentType.sys.id ==
              "buttonBlurb"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
      >
        <ClassicBlurb
          data-plasmic-name={"classicBlurb"}
          data-plasmic-override={overrides.classicBlurb}
          className={classNames("__wab_instance", sty.classicBlurb)}
          slot={
            <React.Fragment>
              {(() => {
                try {
                  return $queries.pageZoneQuery.data.response.fields.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          }
          slot2={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__iMe3C
              )}
            >
              <div
                className={projectcss.__wab_expr_html_text}
                dangerouslySetInnerHTML={{
                  __html: (() => {
                    try {
                      return (() => {
                        $$.marked.use({
                          gfm: true,
                          breaks: true
                        });
                        const text =
                          $queries.pageZoneQuery.data.response.fields.text;
                        if (text) {
                          return $$.marked.parse(
                            $queries.pageZoneQuery.data.response.fields.text
                          );
                        }
                      })();
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()
                }}
              />
            </div>
          }
          slot3={
            (() => {
              try {
                return $queries.pageZoneQuery.data.response.fields.button2Text;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                className={classNames("__wab_instance", sty.button__sjhUn)}
                link={(() => {
                  try {
                    return $queries.pageZoneQuery.data.response.fields
                      .button2Url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rv
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.pageZoneQuery.data.response.fields
                          .button2Text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Button>
            ) : null
          }
          slot4={
            (() => {
              try {
                return $queries.pageZoneQuery.data.response.fields.buttonText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Button
                className={classNames("__wab_instance", sty.button__g2W2A)}
                link={(() => {
                  try {
                    return $queries.pageZoneQuery.data.response.fields
                      .button1Url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ylryX
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.pageZoneQuery.data.response.fields
                          .buttonText;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Button>
            ) : null
          }
        >
          <PlasmicImg__
            alt={""}
            className={classNames(sty.img__oxLsy)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={(() => {
              try {
                return $queries.overflowBlurbGetImage.data.response.fields.file
                  .url;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return {
                    src: "/plasmic/www_site/images/image4.png",
                    fullWidth: 1506,
                    fullHeight: 1202,
                    aspectRatio: undefined
                  };
                }
                throw e;
              }
            })()}
          />
        </ClassicBlurb>
      </ConditionGuard>
      <ConditionGuard
        data-plasmic-name={"ratesWidget"}
        data-plasmic-override={overrides.ratesWidget}
        className={classNames("__wab_instance", sty.ratesWidget)}
        condition={(() => {
          try {
            return (
              $queries.pageZoneQuery.data.response.sys.contentType.sys.id ==
              "bowlingRatesWidget"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })()}
      >
        <RatesWidget
          center={(() => {
            try {
              return $props.locationProp1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames("__wab_instance", sty.ratesWidget__pmsU2)}
        />
      </ConditionGuard>
      <ConditionGuard
        data-plasmic-name={"leagueScheduleWidget"}
        data-plasmic-override={overrides.leagueScheduleWidget}
        className={classNames("__wab_instance", sty.leagueScheduleWidget)}
        condition={(() => {
          try {
            return (
              $queries.pageZoneQuery.data.response.sys.contentType.sys.id ==
              "leagueWidget"
            );
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()}
      >
        <LeagueScheduleWidget
          center={(() => {
            try {
              return $props.locationProp1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
          className={classNames(
            "__wab_instance",
            sty.leagueScheduleWidget__cHd0R
          )}
        />
      </ConditionGuard>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "mainWelcomeConditionalGuard",
    "mainWelcome",
    "h1",
    "overflowBlurbConditionalGuard",
    "overflowBlurb",
    "menuItem",
    "menuItemName",
    "menuItemDescription",
    "menuItemImage",
    "menuItemImageLeft",
    "menuSection",
    "carousel",
    "buttonBlurb",
    "classicBlurb",
    "ratesWidget",
    "leagueScheduleWidget"
  ],
  mainWelcomeConditionalGuard: [
    "mainWelcomeConditionalGuard",
    "mainWelcome",
    "h1"
  ],
  mainWelcome: ["mainWelcome", "h1"],
  h1: ["h1"],
  overflowBlurbConditionalGuard: [
    "overflowBlurbConditionalGuard",
    "overflowBlurb"
  ],
  overflowBlurb: ["overflowBlurb"],
  menuItem: ["menuItem", "menuItemName", "menuItemDescription"],
  menuItemName: ["menuItemName"],
  menuItemDescription: ["menuItemDescription"],
  menuItemImage: ["menuItemImage"],
  menuItemImageLeft: ["menuItemImageLeft"],
  menuSection: ["menuSection"],
  carousel: ["carousel"],
  buttonBlurb: ["buttonBlurb", "classicBlurb"],
  classicBlurb: ["classicBlurb"],
  ratesWidget: ["ratesWidget"],
  leagueScheduleWidget: ["leagueScheduleWidget"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  mainWelcomeConditionalGuard: typeof ConditionGuard;
  mainWelcome: typeof MainWelcome;
  h1: "h1";
  overflowBlurbConditionalGuard: typeof ConditionGuard;
  overflowBlurb: typeof OverflowBlurb;
  menuItem: typeof ConditionGuard;
  menuItemName: "div";
  menuItemDescription: "div";
  menuItemImage: typeof ConditionGuard;
  menuItemImageLeft: typeof ConditionGuard;
  menuSection: typeof ConditionGuard;
  carousel: typeof ConditionGuard;
  buttonBlurb: typeof ConditionGuard;
  classicBlurb: typeof ClassicBlurb;
  ratesWidget: typeof ConditionGuard;
  leagueScheduleWidget: typeof ConditionGuard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPageZoneRenderer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPageZoneRenderer__VariantsArgs;
    args?: PlasmicPageZoneRenderer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPageZoneRenderer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPageZoneRenderer__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageZoneRenderer__ArgProps,
          internalVariantPropNames: PlasmicPageZoneRenderer__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageZoneRenderer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageZoneRenderer";
  } else {
    func.displayName = `PlasmicPageZoneRenderer.${nodeName}`;
  }
  return func;
}

export const PlasmicPageZoneRenderer = Object.assign(
  // Top-level PlasmicPageZoneRenderer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mainWelcomeConditionalGuard: makeNodeComponent(
      "mainWelcomeConditionalGuard"
    ),
    mainWelcome: makeNodeComponent("mainWelcome"),
    h1: makeNodeComponent("h1"),
    overflowBlurbConditionalGuard: makeNodeComponent(
      "overflowBlurbConditionalGuard"
    ),
    overflowBlurb: makeNodeComponent("overflowBlurb"),
    menuItem: makeNodeComponent("menuItem"),
    menuItemName: makeNodeComponent("menuItemName"),
    menuItemDescription: makeNodeComponent("menuItemDescription"),
    menuItemImage: makeNodeComponent("menuItemImage"),
    menuItemImageLeft: makeNodeComponent("menuItemImageLeft"),
    menuSection: makeNodeComponent("menuSection"),
    carousel: makeNodeComponent("carousel"),
    buttonBlurb: makeNodeComponent("buttonBlurb"),
    classicBlurb: makeNodeComponent("classicBlurb"),
    ratesWidget: makeNodeComponent("ratesWidget"),
    leagueScheduleWidget: makeNodeComponent("leagueScheduleWidget"),

    // Metadata about props expected for PlasmicPageZoneRenderer
    internalVariantProps: PlasmicPageZoneRenderer__VariantProps,
    internalArgProps: PlasmicPageZoneRenderer__ArgProps
  }
);

export default PlasmicPageZoneRenderer;
/* prettier-ignore-end */
