// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5wfiQsykEjzgVqMWi3s1vV

import * as React from "react";
import { hasVariant, ensureGlobalVariants } from "@plasmicapp/react-web";
import { ContentfulCredentialsProvider } from "@plasmicpkgs/plasmic-contentful";
import { EmbedCss } from "@plasmicpkgs/plasmic-embed-css";
import { AntdConfigProvider } from "@plasmicpkgs/antd5/skinny/registerConfigProvider";
import { CmsCredentialsProvider } from "@plasmicpkgs/plasmic-cms";
import { useScreenVariants as useScreenVariantso1EZtZviId2I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o1EZtZVIId2i/globalVariant

export interface GlobalContextsProviderProps {
  children?: React.ReactElement;
  contentfulCredentialsProviderProps?: Partial<
    Omit<React.ComponentProps<typeof ContentfulCredentialsProvider>, "children">
  >;
  embedCssProps?: Partial<
    Omit<React.ComponentProps<typeof EmbedCss>, "children">
  >;
  antdConfigProviderProps?: Partial<
    Omit<React.ComponentProps<typeof AntdConfigProvider>, "children">
  >;
  cmsCredentialsProviderProps?: Partial<
    Omit<React.ComponentProps<typeof CmsCredentialsProvider>, "children">
  >;
}

export default function GlobalContextsProvider(
  props: GlobalContextsProviderProps
) {
  const {
    children,
    contentfulCredentialsProviderProps,
    embedCssProps,
    antdConfigProviderProps,
    cmsCredentialsProviderProps
  } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso1EZtZviId2I()
  });

  return (
    <ContentfulCredentialsProvider
      {...contentfulCredentialsProviderProps}
      accessToken={
        contentfulCredentialsProviderProps &&
        "accessToken" in contentfulCredentialsProviderProps
          ? contentfulCredentialsProviderProps.accessToken!
          : "d5206d1bc93f235c8f06c12c2cfbe167368146a1b6c4fe2224fb5a580d8a9299"
      }
      environment={
        contentfulCredentialsProviderProps &&
        "environment" in contentfulCredentialsProviderProps
          ? contentfulCredentialsProviderProps.environment!
          : "master"
      }
      space={
        contentfulCredentialsProviderProps &&
        "space" in contentfulCredentialsProviderProps
          ? contentfulCredentialsProviderProps.space!
          : "bt2x230ynumr"
      }
    >
      <EmbedCss
        {...embedCssProps}
        css={
          embedCssProps && "css" in embedCssProps
            ? embedCssProps.css!
            : "/* CSS snippet */\n.pointed-rectangle {\n    clip-path: polygon(15% 0, 85% 0, 100% 50%, 85% 100%, 15% 100%, 0% 50%);\n}"
        }
      >
        <AntdConfigProvider
          {...antdConfigProviderProps}
          borderRadius={
            antdConfigProviderProps && "borderRadius" in antdConfigProviderProps
              ? antdConfigProviderProps.borderRadius!
              : 6
          }
          colorBgBase={
            antdConfigProviderProps && "colorBgBase" in antdConfigProviderProps
              ? antdConfigProviderProps.colorBgBase!
              : "#ffffff"
          }
          colorError={
            antdConfigProviderProps && "colorError" in antdConfigProviderProps
              ? antdConfigProviderProps.colorError!
              : "#ff4d4f"
          }
          colorInfo={
            antdConfigProviderProps && "colorInfo" in antdConfigProviderProps
              ? antdConfigProviderProps.colorInfo!
              : "#1677ff"
          }
          colorPrimary={
            antdConfigProviderProps && "colorPrimary" in antdConfigProviderProps
              ? antdConfigProviderProps.colorPrimary!
              : "#1677ff"
          }
          colorSuccess={
            antdConfigProviderProps && "colorSuccess" in antdConfigProviderProps
              ? antdConfigProviderProps.colorSuccess!
              : "#52c41a"
          }
          colorWarning={
            antdConfigProviderProps && "colorWarning" in antdConfigProviderProps
              ? antdConfigProviderProps.colorWarning!
              : "#faad14"
          }
          controlHeight={
            antdConfigProviderProps &&
            "controlHeight" in antdConfigProviderProps
              ? antdConfigProviderProps.controlHeight!
              : 32
          }
          defaultDark={
            antdConfigProviderProps && "defaultDark" in antdConfigProviderProps
              ? antdConfigProviderProps.defaultDark!
              : false
          }
          lineWidth={
            antdConfigProviderProps && "lineWidth" in antdConfigProviderProps
              ? antdConfigProviderProps.lineWidth!
              : 1
          }
          loadingText={
            antdConfigProviderProps && "loadingText" in antdConfigProviderProps
              ? antdConfigProviderProps.loadingText!
              : undefined
          }
          removeLoading={
            antdConfigProviderProps &&
            "removeLoading" in antdConfigProviderProps
              ? antdConfigProviderProps.removeLoading!
              : undefined
          }
          sizeStep={
            antdConfigProviderProps && "sizeStep" in antdConfigProviderProps
              ? antdConfigProviderProps.sizeStep!
              : 4
          }
          sizeUnit={
            antdConfigProviderProps && "sizeUnit" in antdConfigProviderProps
              ? antdConfigProviderProps.sizeUnit!
              : 4
          }
          themeStyles={
            antdConfigProviderProps && "themeStyles" in antdConfigProviderProps
              ? antdConfigProviderProps.themeStyles!
              : hasVariant(globalVariants, "screen", "mobileOnly")
              ? {
                  fontFamily: "League Spartan",
                  fontSize: "16px",
                  fontWeight: "500",
                  lineHeight: "27px",
                  color: "var(--antd-colorBgContainer)",
                  letterSpacing: "normal"
                }
              : true
              ? {
                  fontFamily: "League Spartan",
                  fontSize: "20px",
                  fontWeight: "500",
                  lineHeight: "1",
                  color: "var(--antd-colorBgContainer)",
                  letterSpacing: "normal"
                }
              : undefined
          }
          wireframe={
            antdConfigProviderProps && "wireframe" in antdConfigProviderProps
              ? antdConfigProviderProps.wireframe!
              : false
          }
        >
          <CmsCredentialsProvider
            {...cmsCredentialsProviderProps}
            databaseId={
              cmsCredentialsProviderProps &&
              "databaseId" in cmsCredentialsProviderProps
                ? cmsCredentialsProviderProps.databaseId!
                : "bB6iDZZuZbhMZFE6LLEQ8z"
            }
            databaseToken={
              cmsCredentialsProviderProps &&
              "databaseToken" in cmsCredentialsProviderProps
                ? cmsCredentialsProviderProps.databaseToken!
                : "OawKrNGkwheXuWyf0xkC93CBrqq2v4BvXm42OF8XcSlFpLZDRNcVIO73I2uYwwc6bNasPPzJbWUdJYlG9le8w"
            }
            host={
              cmsCredentialsProviderProps &&
              "host" in cmsCredentialsProviderProps
                ? cmsCredentialsProviderProps.host!
                : "https://data.plasmic.app"
            }
            locale={
              cmsCredentialsProviderProps &&
              "locale" in cmsCredentialsProviderProps
                ? cmsCredentialsProviderProps.locale!
                : "Default"
            }
          >
            {children}
          </CmsCredentialsProvider>
        </AntdConfigProvider>
      </EmbedCss>
    </ContentfulCredentialsProvider>
  );
}
