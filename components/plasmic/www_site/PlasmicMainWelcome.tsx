// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5wfiQsykEjzgVqMWi3s1vV
// Component: c1IgRoFQrCHU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ContentfulFetcher } from "@plasmicpkgs/plasmic-contentful";
import { ContentfulField } from "@plasmicpkgs/plasmic-contentful";

import { useScreenVariants as useScreenVariantso1EZtZviId2I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: o1EZtZVIId2i/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5wfiQsykEjzgVqMWi3s1vV/projectcss
import sty from "./PlasmicMainWelcome.module.css"; // plasmic-import: c1IgRoFQrCHU/css

createPlasmicElementProxy;

export type PlasmicMainWelcome__VariantMembers = {};
export type PlasmicMainWelcome__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainWelcome__VariantsArgs;
export const PlasmicMainWelcome__VariantProps = new Array<VariantPropType>();

export type PlasmicMainWelcome__ArgsType = {
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  locationProp?: string;
};
type ArgPropType = keyof PlasmicMainWelcome__ArgsType;
export const PlasmicMainWelcome__ArgProps = new Array<ArgPropType>(
  "children2",
  "children3",
  "locationProp"
);

export type PlasmicMainWelcome__OverridesType = {
  mainWelcome?: Flex__<"div">;
  welcomeHeading?: Flex__<"h1">;
  h2?: Flex__<"h2">;
  contentfulFetcher?: Flex__<typeof ContentfulFetcher>;
  contentfulField?: Flex__<typeof ContentfulField>;
};

export interface DefaultMainWelcomeProps {
  children2?: React.ReactNode;
  children3?: React.ReactNode;
  locationProp?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainWelcome__RenderFunc(props: {
  variants: PlasmicMainWelcome__VariantsArgs;
  args: PlasmicMainWelcome__ArgsType;
  overrides: PlasmicMainWelcome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "location",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso1EZtZviId2I()
  });

  return (
    <div
      data-plasmic-name={"mainWelcome"}
      data-plasmic-override={overrides.mainWelcome}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      background={(() => {
        try {
          return undefined;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.mainWelcome
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns__goM1T)}
      >
        <div className={classNames(projectcss.all, sty.column__fitU)}>
          <h1
            data-plasmic-name={"welcomeHeading"}
            data-plasmic-override={overrides.welcomeHeading}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              sty.welcomeHeading
            )}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iS4N
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    {
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__hPujK
                        )}
                      >
                        {"WELCOME"}
                      </h1>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              ),
              value: args.children2
            })}
          </h1>
          <section className={classNames(projectcss.all, sty.section__zkHeF)} />

          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {"TO BACK ALLEY BOWLING!"}
          </h2>
          {(() => {
            try {
              return !$props.locationProp;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vxjuc
              )}
            >
              {"Select a location to view our hours!"}
            </div>
          ) : null}
          {(() => {
            try {
              return !!$props.locationProp;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <ContentfulFetcher
              data-plasmic-name={"contentfulFetcher"}
              data-plasmic-override={overrides.contentfulFetcher}
              className={classNames("__wab_instance", sty.contentfulFetcher)}
              contentType={"centerOpenAndClose"}
              filterField={"center"}
              filterValue={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return $props.locationProp;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $props.locationProp;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()
              }
              noAutoRepeat={false}
              noLayout={false}
              searchParameter={"[match]"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.columns__gaGaR)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__siClp)}
                    >
                      <ContentfulField
                        data-plasmic-name={"contentfulField"}
                        data-plasmic-override={overrides.contentfulField}
                        className={classNames(
                          "__wab_instance",
                          sty.contentfulField
                        )}
                        objectPath={["day"]}
                      />

                      <section
                        className={classNames(
                          projectcss.all,
                          sty.section__nQzUa
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__qfmQ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xD3My
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                function formatTime(time) {
                                  time = String(time);
                                  let hours = globalThis.parseInt(
                                    time.substring(0, time.length - 2)
                                  );
                                  let minutes = time.substring(time.length - 2);
                                  hours = hours % 24;
                                  const suffix = hours >= 12 ? "PM" : "AM";
                                  hours = hours % 12 || 12;
                                  return `${hours}${
                                    minutes === "00" ? "" : ":" + minutes
                                  }${suffix}`;
                                }
                                return formatTime(
                                  $ctx.currentContentfulCenterOpenAndCloseItem
                                    .fields.openTimeText
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__j0Y4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zrHgC
                        )}
                      >
                        {"-"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__pzUv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__h7UvT
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (() => {
                                function formatTime(time) {
                                  time = String(time);
                                  let hours = globalThis.parseInt(
                                    time.substring(0, time.length - 2)
                                  );
                                  let minutes = time.substring(time.length - 2);
                                  hours = hours % 24;
                                  const suffix = hours >= 12 ? "PM" : "AM";
                                  hours = hours % 12 || 12;
                                  return `${hours}${
                                    minutes === "00" ? "" : ":" + minutes
                                  }${suffix}`;
                                }
                                return formatTime(
                                  $ctx.currentContentfulCenterOpenAndCloseItem
                                    .fields.closeTimeText
                                );
                              })();
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </ContentfulFetcher>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <section
              className={classNames(projectcss.all, sty.section__i6Zev)}
            />
          ) : null}
        </div>
        <div className={classNames(projectcss.all, sty.column___8OxU)}>
          {renderPlasmicSlot({
            defaultContents:
              "We have two bowling alleys in Glendale and Northridge with state of the art lanes, billiards, arcade games & a great menu to order from!\n\nWe recommend you call the center before coming in to check our availability.\n\nIf you would like to book a reservation, it must be booked at least 12 hours in advance and must be pre paid through our online booking portal. To make a reservation Click Here!\n\nExtreme Bowling starts at approximately 9PM on Friday Nights (immediately after league) and 8PM on Saturday Nights!\n\nWe ask that guests refrain from bringing outside food or drinks into our centers. \n\nBack Alley Bowling Northridge (Previously Matador Bowl) has been a neighborhood landmark since 1960, when we first opened our doors to the Northridge community. Over the years we've loved getting to know our patrons, and are always finding new ways to show them a great time.\n\nEstablished in 1970, Back Alley Bowling Glendale (Previously Jewel City  Bowl) has been in business for more than 50 years. Making sure our staff's here to ensure that your family has a great time is our top priority, our lanes are always welcome to show our guests the best bowling experience they could hope to find for any occasion- Whether it be a special occasion, league night, or even just a family outing on the lanes!\n",
            value: args.children3
          })}
        </div>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainWelcome: [
    "mainWelcome",
    "welcomeHeading",
    "h2",
    "contentfulFetcher",
    "contentfulField"
  ],
  welcomeHeading: ["welcomeHeading"],
  h2: ["h2"],
  contentfulFetcher: ["contentfulFetcher", "contentfulField"],
  contentfulField: ["contentfulField"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainWelcome: "div";
  welcomeHeading: "h1";
  h2: "h2";
  contentfulFetcher: typeof ContentfulFetcher;
  contentfulField: typeof ContentfulField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainWelcome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainWelcome__VariantsArgs;
    args?: PlasmicMainWelcome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainWelcome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMainWelcome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainWelcome__ArgProps,
          internalVariantPropNames: PlasmicMainWelcome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainWelcome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainWelcome") {
    func.displayName = "PlasmicMainWelcome";
  } else {
    func.displayName = `PlasmicMainWelcome.${nodeName}`;
  }
  return func;
}

export const PlasmicMainWelcome = Object.assign(
  // Top-level PlasmicMainWelcome renders the root element
  makeNodeComponent("mainWelcome"),
  {
    // Helper components rendering sub-elements
    welcomeHeading: makeNodeComponent("welcomeHeading"),
    h2: makeNodeComponent("h2"),
    contentfulFetcher: makeNodeComponent("contentfulFetcher"),
    contentfulField: makeNodeComponent("contentfulField"),

    // Metadata about props expected for PlasmicMainWelcome
    internalVariantProps: PlasmicMainWelcome__VariantProps,
    internalArgProps: PlasmicMainWelcome__ArgProps
  }
);

export default PlasmicMainWelcome;
/* prettier-ignore-end */
