// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5wfiQsykEjzgVqMWi3s1vV
// Component: 7CIJLiueCA_x

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { RichList } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-list";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5wfiQsykEjzgVqMWi3s1vV/projectcss
import sty from "./PlasmicLeagueSchedule.module.css"; // plasmic-import: 7CIJLiueCA_x/css

createPlasmicElementProxy;

export type PlasmicLeagueSchedule__VariantMembers = {
  test: "unnamedVariant";
};
export type PlasmicLeagueSchedule__VariantsArgs = {
  test?: SingleChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicLeagueSchedule__VariantsArgs;
export const PlasmicLeagueSchedule__VariantProps = new Array<VariantPropType>(
  "test"
);

export type PlasmicLeagueSchedule__ArgsType = {};
type ArgPropType = keyof PlasmicLeagueSchedule__ArgsType;
export const PlasmicLeagueSchedule__ArgProps = new Array<ArgPropType>();

export type PlasmicLeagueSchedule__OverridesType = {
  root?: Flex__<"div">;
  dataList?: Flex__<typeof RichList>;
};

export interface DefaultLeagueScheduleProps {
  test?: SingleChoiceArg<"unnamedVariant">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLeagueSchedule__RenderFunc(props: {
  variants: PlasmicLeagueSchedule__VariantsArgs;
  args: PlasmicLeagueSchedule__ArgsType;
  overrides: PlasmicLeagueSchedule__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "test",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.test
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query3: usePlasmicDataOp(() => {
      return {
        sourceId: "6C5GutKknwRfikZFCLEAXU",
        opId: "eb84f22f-38e2-460c-9b7f-dd36f8b6e88d",
        userArgs: {},
        cacheKey: `plasmic.$.eb84f22f-38e2-460c-9b7f-dd36f8b6e88d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <RichList
        data-plasmic-name={"dataList"}
        data-plasmic-override={overrides.dataList}
        bordered={true}
        className={classNames("__wab_instance", sty.dataList, {
          [sty.dataListtest_unnamedVariant]: hasVariant(
            $state,
            "test",
            "unnamedVariant"
          )
        })}
        content={(() => {
          const __composite = [
            { key: "League Name", fieldId: null, role: "content" }
          ];
          __composite["0"]["fieldId"] = "League Name";
          return __composite;
        })()}
        data={(() => {
          try {
            return $queries.query3.data.response;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return (() => {
                try {
                  return $queries.query3;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })();
            }
            throw e;
          }
        })()}
        onRowClick={async (rowKey, row, event) => {
          const $steps = {};

          $steps["updateStateVariable"] = true
            ? (() => {
                const actionArgs = {};
                return (async ({ dataOp, continueOnError }) => {
                  try {
                    const response = await executePlasmicDataOp(dataOp, {
                      userAuthToken: dataSourcesCtx?.userAuthToken,
                      user: dataSourcesCtx?.user
                    });
                    await plasmicInvalidate(dataOp.invalidatedKeys);
                    return response;
                  } catch (e) {
                    if (!continueOnError) {
                      throw e;
                    }
                    return e;
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateStateVariable"] != null &&
            typeof $steps["updateStateVariable"] === "object" &&
            typeof $steps["updateStateVariable"].then === "function"
          ) {
            $steps["updateStateVariable"] = await $steps["updateStateVariable"];
          }
        }}
        pagination={false}
        rowActions={[{ type: "item" }]}
        title={[]}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "dataList"],
  dataList: ["dataList"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  dataList: typeof RichList;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeagueSchedule__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeagueSchedule__VariantsArgs;
    args?: PlasmicLeagueSchedule__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLeagueSchedule__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLeagueSchedule__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLeagueSchedule__ArgProps,
          internalVariantPropNames: PlasmicLeagueSchedule__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLeagueSchedule__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeagueSchedule";
  } else {
    func.displayName = `PlasmicLeagueSchedule.${nodeName}`;
  }
  return func;
}

export const PlasmicLeagueSchedule = Object.assign(
  // Top-level PlasmicLeagueSchedule renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dataList: makeNodeComponent("dataList"),

    // Metadata about props expected for PlasmicLeagueSchedule
    internalVariantProps: PlasmicLeagueSchedule__VariantProps,
    internalArgProps: PlasmicLeagueSchedule__ArgProps
  }
);

export default PlasmicLeagueSchedule;
/* prettier-ignore-end */
