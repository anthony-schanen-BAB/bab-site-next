// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5wfiQsykEjzgVqMWi3s1vV
// Component: PpwuOcX4S-rM

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select from "../../Select"; // plasmic-import: 0-8LFTczpILE/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 5wfiQsykEjzgVqMWi3s1vV/projectcss
import sty from "./PlasmicLocationPicker.module.css"; // plasmic-import: PpwuOcX4S-rM/css

createPlasmicElementProxy;

export type PlasmicLocationPicker__VariantMembers = {};
export type PlasmicLocationPicker__VariantsArgs = {};
type VariantPropType = keyof PlasmicLocationPicker__VariantsArgs;
export const PlasmicLocationPicker__VariantProps = new Array<VariantPropType>();

export type PlasmicLocationPicker__ArgsType = {
  selectValue?: string;
  onSelectValueChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicLocationPicker__ArgsType;
export const PlasmicLocationPicker__ArgProps = new Array<ArgPropType>(
  "selectValue",
  "onSelectValueChange"
);

export type PlasmicLocationPicker__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  select?: Flex__<typeof Select>;
  text?: Flex__<"div">;
};

export interface DefaultLocationPickerProps {
  selectValue?: string;
  onSelectValueChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLocationPicker__RenderFunc(props: {
  variants: PlasmicLocationPicker__VariantsArgs;
  args: PlasmicLocationPicker__ArgsType;
  overrides: PlasmicLocationPicker__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "writable",
        variableType: "text",

        valueProp: "selectValue",
        onChangeProp: "onSelectValueChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Select
          data-plasmic-name={"select"}
          data-plasmic-override={overrides.select}
          className={classNames("__wab_instance", sty.select)}
          onChange={async (...eventArgs: any) => {
            ((...eventArgs) => {
              generateStateOnChangeProp($state, ["select", "value"])(
                eventArgs[0]
              );
            }).apply(null, eventArgs);
            (async value => {
              const $steps = {};
            }).apply(null, eventArgs);
          }}
          options={(() => {
            const __composite = [
              { value: null, label: null },
              { value: null, label: null }
            ];
            __composite["0"]["value"] = "Glendale";
            __composite["0"]["label"] = "Glendale";
            __composite["1"]["value"] = "Northridge";
            __composite["1"]["label"] = "Northridge";
            return __composite;
          })()}
          placeholder={
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Select a location"}
            </div>
          }
          value={generateStateValueProp($state, ["select", "value"])}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "select", "text"],
  freeBox: ["freeBox", "select", "text"],
  select: ["select", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  select: typeof Select;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLocationPicker__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLocationPicker__VariantsArgs;
    args?: PlasmicLocationPicker__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLocationPicker__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicLocationPicker__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLocationPicker__ArgProps,
          internalVariantPropNames: PlasmicLocationPicker__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLocationPicker__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLocationPicker";
  } else {
    func.displayName = `PlasmicLocationPicker.${nodeName}`;
  }
  return func;
}

export const PlasmicLocationPicker = Object.assign(
  // Top-level PlasmicLocationPicker renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    select: makeNodeComponent("select"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLocationPicker
    internalVariantProps: PlasmicLocationPicker__VariantProps,
    internalArgProps: PlasmicLocationPicker__ArgProps
  }
);

export default PlasmicLocationPicker;
/* prettier-ignore-end */
